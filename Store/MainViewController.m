//
//  MainViewController.m
//  Store
//
//  Created by Peter Wansch on 10/26/13.
//  Copyright (c) 2013 Peter Wansch. All rights reserved.
//

#import "MainViewController.h"
#import "MainView.h"

@interface MainViewController ()
- (void)initializeGame;
- (void)swipe:(UISwipeGestureRecognizerDirection)direction :(NSUInteger)number;
- (void) vdMoveWorker:(BoardLocation *) ppointlWorker :(short) sDir;
@end

@implementation MainViewController

@synthesize newId;
@synthesize pushId;
@synthesize illegalId;
@synthesize undoId;
@synthesize wonId;
@synthesize lostId;
@synthesize ptlWorker;

BoardLocation ptlWorkerInitial[NUMBER_OF_LEVELS] = {{12,5},{8,12},{16,12},{11,4},{16,7},
    {13,12},{9,12},{3,10},{3,5},{3,15},
    {8,12},{9,10},{7,10},{11,14},{8,11},
    {6,10},{4,5},{14,12},{7,15},{15,14},
    {7,11},{11,12},{4,8},{4,2},{17,10},
    {15,5},{11,3},{3,7},{12,10},{6,10},
    {9,13},{5,11},{14,5},{13,12},{11,14},
    {11,9},{10,2},{13,12},{12,13},{16,15},
    {18,7},{17,12},{10,6},{10,12},{7,6},
    {14,9},{8,8},{10,3},{9,4},{3,9}};

short BoardLevels[NUMBER_OF_LEVELS][COLUMNSX][LINESY] = {
    /* 1 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,0,0,0,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,7,4,2,3,0,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,0,3,3,4,3,3,4,3,3,3,0,5,5,5,5},
        {5,5,5,1,4,4,7,4,4,7,4,7,4,1,5,5,5,5},
        {5,5,5,1,4,0,4,0,0,4,4,4,4,1,5,5,5,5},
        {5,5,5,1,4,1,4,2,2,7,7,4,4,1,5,5,5,5},
        {5,5,5,1,4,2,4,4,4,4,0,3,3,2,5,5,5,5},
        {5,5,5,1,4,4,4,0,3,3,2,5,5,5,5,5,5,5},
        {5,5,5,2,0,3,4,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,9,4,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,0,4,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,2,4,2,0,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,2,3,3,3,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 2 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,3,3,0,5,5,5,5},
        {5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5},
        {5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5},
        {5,5,5,5,0,3,3,1,4,4,4,4,4,1,5,5,5,5},
        {5,5,5,5,1,4,4,1,4,4,4,4,4,1,5,5,5,5},
        {5,5,5,5,1,4,7,1,4,4,4,4,8,1,5,5,5,5},
        {5,5,5,5,1,4,4,2,3,4,3,3,3,1,5,5,5,5},
        {5,5,5,5,1,4,4,4,4,4,7,4,4,1,5,5,5,5},
        {5,5,5,5,1,3,7,0,3,4,0,7,4,1,5,5,5,5},
        {5,5,5,5,1,4,4,2,4,4,1,4,4,1,5,5,5,5},
        {5,5,5,5,1,4,7,7,4,0,1,4,4,1,5,5,5,5},
        {5,5,5,5,1,4,4,4,7,2,2,7,4,1,5,5,5,5},
        {5,5,5,5,1,4,7,7,4,4,4,4,0,2,5,5,5,5},
        {5,5,5,5,1,4,4,4,0,4,4,4,1,5,5,5,5,5},
        {5,5,5,5,2,3,3,3,2,3,3,3,2,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 3 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,0,3,0,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,2,6,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,2,0,4,0,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,2,2,0,3,3,3,0,5,5,5,5},
        {5,5,5,5,5,1,7,4,4,2,4,4,4,1,5,5,5,5},
        {5,5,5,5,5,1,4,7,7,7,7,7,4,1,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,4,3,4,1,5,5,5,5},
        {5,5,5,5,5,1,7,4,3,7,4,7,4,1,5,5,5,5},
        {5,5,5,5,5,1,4,7,4,4,7,4,4,1,5,5,5,5},
        {5,5,5,5,5,1,4,4,0,3,3,0,8,1,5,5,5,5},
        {5,5,5,5,5,1,4,4,1,5,5,2,3,2,5,5,5,5},
        {5,5,5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 4 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,0,3,3,3,3,0,3,3,3,3,3,0,5,5,5,5},
        {5,5,1,4,4,4,4,2,4,4,4,4,4,1,5,5,5,5},
        {5,5,1,4,4,4,4,4,4,7,4,7,4,1,5,5,5,5},
        {5,5,1,4,7,4,4,0,7,7,7,7,4,1,5,5,5,5},
        {5,5,1,4,7,4,4,1,4,4,4,7,4,1,5,5,5,5},
        {5,5,1,3,3,4,3,1,3,3,4,3,3,1,5,5,5,5},
        {5,5,1,4,7,7,4,1,4,7,4,7,4,1,5,5,5,5},
        {5,5,1,4,7,4,4,1,4,4,4,4,4,1,5,5,5,5},
        {5,5,1,4,4,4,4,1,4,7,4,4,7,1,5,5,5,5},
        {5,5,1,4,4,4,4,1,4,4,7,7,4,1,5,5,5,5},
        {5,5,2,0,8,0,3,1,4,7,4,4,7,1,5,5,5,5},
        {5,5,5,2,3,2,5,2,3,0,3,3,4,2,3,0,5,5},
        {5,5,5,5,5,5,5,5,5,1,4,4,4,4,4,1,5,5},
        {5,5,5,5,5,5,5,5,5,1,4,4,4,4,4,1,5,5},
        {5,5,5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,5,5,5,5,5,2,3,3,3,3,3,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 5 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,0,3,3,3,0,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,6,6,6,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,1,0,4,0,1,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,2,2,4,2,2,3,3,3,0,5,5,5},
        {5,5,5,5,1,4,4,7,7,4,4,4,4,4,1,5,5,5},
        {5,5,0,3,2,7,4,4,4,7,0,4,3,4,1,5,5,5},
        {5,5,1,4,4,4,7,4,7,4,1,4,7,4,1,5,5,5},
        {5,5,1,4,0,7,4,7,7,4,2,4,0,0,2,5,5,5},
        {5,5,1,4,2,4,4,4,4,7,4,4,2,1,5,5,5,5},
        {5,5,1,4,4,4,0,8,0,0,4,7,4,1,5,5,5,5},
        {5,5,2,3,3,3,2,3,2,1,4,4,4,1,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,2,3,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 6 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,3,3,0,5,5,5,5},
        {5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5},
        {5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5},
        {5,5,5,0,3,3,3,2,0,4,4,4,4,1,5,5,5,5},
        {5,5,5,1,4,4,4,4,1,4,4,4,4,1,5,5,5,5},
        {5,5,5,1,4,7,4,7,2,3,4,0,3,2,5,5,5,5},
        {5,5,5,1,0,4,7,4,4,4,4,1,5,5,5,5,5,5},
        {5,5,5,1,2,4,3,3,3,3,4,2,0,5,5,5,5,5},
        {5,5,5,1,4,7,4,7,4,4,7,4,2,0,5,5,5,5},
        {5,5,5,1,4,4,7,4,7,7,7,4,11,1,5,5,5,5},
        {5,5,5,1,4,4,4,4,4,4,4,4,0,2,5,5,5,5},
        {5,5,5,2,3,3,3,3,3,3,3,3,2,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 7 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,0,3,3,3,3,3,0,3,3,0,5,5,5,5,5},
        {5,5,5,1,4,4,4,4,4,1,4,4,2,0,5,5,5,5},
        {5,5,5,1,4,7,4,7,7,2,4,4,4,1,5,5,5,5},
        {5,5,5,2,0,7,4,4,4,4,7,4,3,1,5,5,5,5},
        {5,5,5,5,1,4,4,7,4,0,4,4,4,1,5,5,5,5},
        {5,5,5,5,2,3,0,4,0,1,4,7,8,1,5,5,5,5},
        {5,5,5,5,5,5,1,7,1,1,0,4,0,1,5,5,5,5},
        {5,5,5,5,0,3,2,4,2,1,1,4,2,2,0,5,5,5},
        {5,5,5,5,1,6,6,6,4,2,2,4,4,4,1,5,5,5},
        {5,5,5,5,1,6,6,6,6,7,4,4,7,4,1,5,5,5},
        {5,5,5,5,1,6,6,6,6,0,4,4,7,4,1,5,5,5},
        {5,5,5,5,2,3,3,3,3,1,4,4,4,0,2,5,5,5},
        {5,5,5,5,5,5,5,5,5,2,3,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 8 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,0,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,1,4,4,11,1,5,5,5,5,5,5},
        {5,0,3,3,3,3,3,1,4,4,3,2,3,3,3,3,0,5},
        {5,1,6,6,6,4,4,1,4,4,7,4,4,4,4,4,1,5},
        {5,1,6,6,6,4,4,2,7,4,4,7,4,7,4,4,1,5},
        {5,1,6,6,6,4,4,4,4,7,7,3,7,3,4,0,2,5},
        {5,1,6,6,6,4,4,4,4,4,4,4,4,4,4,1,5,5},
        {5,1,6,6,6,4,4,0,4,3,7,3,7,7,7,1,5,5},
        {5,1,6,6,6,4,4,1,4,7,4,4,4,4,4,1,5,5},
        {5,2,3,3,3,3,3,1,7,3,4,4,4,3,4,1,5,5},
        {5,5,5,5,5,5,5,1,4,4,0,0,3,4,4,1,5,5},
        {5,5,5,5,5,5,5,1,7,4,2,1,4,4,7,1,5,5},
        {5,5,5,5,5,5,5,1,4,4,4,1,4,7,4,1,5,5},
        {5,5,5,5,5,5,5,1,7,3,4,2,4,4,7,1,5,5},
        {5,5,5,5,5,5,5,1,4,4,4,4,4,4,4,1,5,5},
        {5,5,5,5,5,5,5,2,3,3,3,3,3,3,3,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 9 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,0,0,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,10,2,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,7,4,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,1,5,5,5,5,5,5,5,5,5,5},
        {5,5,0,3,2,4,3,2,3,0,5,5,5,5,5,5,5,5},
        {5,5,1,4,4,7,7,4,4,1,0,3,3,0,5,5,5,5},
        {5,5,1,4,7,4,4,4,7,2,2,4,4,1,5,5,5,5},
        {5,5,1,4,7,4,7,7,7,4,4,4,4,1,5,5,5,5},
        {5,5,1,4,4,4,4,4,7,0,0,0,4,1,5,5,5,5},
        {5,5,1,4,7,4,4,7,4,1,2,2,4,2,3,0,5,5},
        {5,5,1,4,4,7,4,4,0,1,4,4,4,4,4,1,5,5},
        {5,5,2,3,0,4,3,0,2,1,4,4,4,4,4,1,5,5},
        {5,5,5,5,1,4,4,1,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,1,7,4,1,5,1,6,6,4,6,6,1,5,5},
        {5,5,5,5,1,4,4,1,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,2,3,3,2,5,2,3,3,3,3,3,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 10 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,3,3,0,3,3,0,3,3,3,0,5,5},
        {5,5,5,5,1,4,4,4,2,4,4,1,4,4,4,2,0,5},
        {5,5,5,5,1,6,6,4,4,4,4,2,7,4,7,11,1,5},
        {5,5,5,5,1,6,6,0,3,4,4,4,4,7,7,0,1,5},
        {5,0,3,3,2,3,3,2,4,4,4,4,4,7,4,1,1,5},
        {5,1,4,4,4,4,4,4,4,0,4,4,4,7,4,1,1,5},
        {5,1,4,0,3,3,3,3,3,1,3,3,3,3,4,2,1,5},
        {5,1,4,1,4,4,4,4,4,1,4,4,4,4,7,4,1,5},
        {5,1,4,1,4,7,4,7,4,1,7,4,7,4,7,4,1,5},
        {5,1,4,1,4,7,7,7,7,1,4,7,7,4,4,4,1,5},
        {5,1,4,1,4,7,4,4,4,2,7,4,4,4,4,4,1,5},
        {5,1,4,1,4,4,4,7,7,4,4,4,7,7,7,4,1,5},
        {5,1,4,1,4,7,4,4,4,0,7,4,7,4,4,4,1,5},
        {5,1,4,1,4,7,4,7,4,1,4,4,4,4,7,4,1,5},
        {5,1,4,2,3,7,4,0,3,2,3,3,3,3,4,3,1,5},
        {5,1,4,4,4,4,4,2,6,6,6,6,6,6,6,4,1,5},
        {5,1,3,3,3,3,3,6,6,6,6,6,6,6,6,4,1,5},
        {5,1,6,6,6,6,6,6,6,6,6,6,6,6,6,4,1,5},
        {5,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 11 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,0,3,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,6,6,1,0,3,3,3,0,5,5,5,5,5,5},
        {5,1,6,6,6,4,1,1,4,4,4,2,0,5,5,5,5,5},
        {5,1,6,6,4,4,2,2,4,3,4,4,2,0,5,5,5,5},
        {5,1,6,3,6,4,4,4,4,4,3,4,4,1,5,5,5,5},
        {5,1,6,6,6,4,0,4,7,7,7,7,4,2,0,5,5,5},
        {5,2,3,3,3,0,2,4,4,4,0,4,4,4,1,5,5,5},
        {5,5,5,5,5,1,4,4,3,7,2,7,8,4,1,5,5,5},
        {5,5,5,5,0,2,7,3,4,7,4,7,4,0,1,5,5,5},
        {5,5,5,5,1,4,4,4,4,4,4,0,4,1,1,5,5,5},
        {5,5,5,5,1,4,4,4,3,3,4,2,7,2,2,0,5,5},
        {5,5,5,5,2,0,4,7,4,4,4,4,4,7,4,1,5,5},
        {5,5,5,5,5,1,4,7,7,0,4,0,4,4,4,1,5,5},
        {5,5,5,5,5,1,4,4,4,1,3,2,3,3,3,2,5,5},
        {5,5,5,5,5,1,4,3,0,2,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 12 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,3,3,3,3,3,0,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,4,4,4,4,1,5,5,5},
        {5,5,5,5,5,1,4,0,3,3,3,3,3,4,1,5,5,5},
        {5,5,5,5,5,1,4,1,4,4,4,4,4,4,1,5,5,5},
        {5,5,5,5,0,2,4,2,4,3,4,4,0,4,1,5,5,5},
        {5,5,5,5,1,4,4,7,4,7,4,7,1,4,1,5,5,5},
        {5,5,5,5,1,4,3,7,7,4,7,4,1,4,1,5,5,5},
        {5,5,5,5,1,4,4,7,4,7,8,7,1,4,1,5,5,5},
        {5,5,0,3,2,0,0,4,7,4,7,4,1,4,1,5,5,5},
        {5,5,1,4,4,2,2,7,4,7,4,7,2,4,1,5,5,5},
        {5,5,1,4,4,4,4,4,4,0,4,4,4,4,1,5,5,5},
        {5,5,1,4,4,0,0,0,0,1,4,7,4,4,1,5,5,5},
        {5,5,1,4,4,2,2,2,2,2,0,3,4,4,1,5,5,5},
        {5,5,1,4,4,6,6,6,6,6,2,4,4,4,1,5,5,5},
        {5,5,2,3,0,6,6,6,6,6,4,4,4,4,1,5,5,5},
        {5,5,5,5,1,6,6,6,6,6,0,3,3,3,2,5,5,5},
        {5,5,5,5,2,3,3,3,3,3,2,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 13 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,3,3,3,0,5,5,5,5,5},
        {5,5,0,3,3,2,4,4,4,4,4,4,1,5,5,5,5,5},
        {5,5,1,4,7,4,7,4,7,4,3,4,2,0,5,5,5,5},
        {5,5,1,4,4,7,4,4,4,3,4,7,4,2,0,5,5,5},
        {5,5,2,3,0,4,3,0,4,4,7,4,4,4,1,5,5,5},
        {5,5,5,5,1,4,4,2,4,3,3,3,4,4,1,5,5,5},
        {5,5,5,5,1,7,4,4,4,7,11,7,4,4,1,5,5,5},
        {5,5,5,5,1,4,4,4,7,4,7,4,4,0,1,5,5,5},
        {5,5,5,5,1,4,3,0,4,4,0,3,3,2,1,5,5,5},
        {5,5,5,0,2,4,4,2,3,3,3,4,4,4,1,5,5,5},
        {5,5,5,1,4,7,4,7,4,4,4,4,4,4,1,5,5,5},
        {5,5,5,1,4,4,3,4,3,4,3,3,3,0,2,5,5,5},
        {5,5,5,1,4,4,7,7,4,4,4,4,4,1,5,5,5,5},
        {5,5,5,1,4,7,3,4,3,4,3,4,4,1,5,5,5,5},
        {5,5,5,1,0,6,6,6,6,6,6,6,4,1,5,5,5,5},
        {5,5,5,1,2,6,3,4,3,4,3,6,4,1,5,5,5,5},
        {5,5,5,1,4,6,6,6,6,6,6,6,0,2,5,5,5,5},
        {5,5,5,1,4,4,4,4,4,4,4,4,1,5,5,5,5,5},
        {5,5,5,2,3,3,3,3,3,3,3,3,2,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 14 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,0,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,2,3,3,3,3,3,0,5,5},
        {5,5,5,5,5,1,4,4,4,4,4,4,4,7,4,1,5,5},
        {5,5,5,5,5,1,4,7,3,4,0,4,0,7,4,1,5,5},
        {5,5,5,5,0,2,7,4,7,4,1,4,1,4,4,1,5,5},
        {5,5,5,5,1,4,4,7,4,0,2,7,2,3,4,1,5,5},
        {5,5,0,3,2,4,7,7,4,1,6,6,6,4,4,1,5,5},
        {5,5,1,4,4,4,4,7,4,1,6,6,6,4,3,2,0,5},
        {5,5,1,4,0,4,0,4,3,2,6,6,6,4,4,4,1,5},
        {5,5,1,4,1,4,1,4,4,4,6,6,6,0,7,4,1,5},
        {5,5,1,4,2,7,2,3,4,0,6,6,6,1,8,4,1,5},
        {5,5,1,4,4,4,7,4,7,1,6,6,6,1,7,4,1,5},
        {5,5,1,3,4,4,7,7,4,2,4,0,0,1,4,4,1,5},
        {5,0,2,4,4,4,4,0,4,4,4,2,2,1,3,3,2,5},
        {5,1,4,4,3,3,3,2,3,3,4,4,4,1,5,5,5,5},
        {5,1,4,4,4,4,4,4,4,7,4,3,4,1,5,5,5,5},
        {5,2,3,3,3,3,3,3,3,0,4,4,4,1,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,2,3,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 15 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,0,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,1,4,4,4,2,3,3,0,3,3,3,0,5,5,5,5},
        {5,5,1,4,7,4,4,4,4,2,4,4,4,1,5,5,5,5},
        {5,5,1,3,7,4,4,4,7,4,4,4,4,2,3,3,0,5},
        {5,5,1,4,4,0,3,7,3,0,3,3,7,4,4,4,1,5},
        {5,0,2,4,4,1,6,6,6,1,4,4,4,3,4,4,1,5},
        {5,1,4,4,3,2,6,6,6,1,4,8,4,7,7,4,1,5},
        {5,1,4,4,4,4,6,12,6,2,4,4,0,4,4,3,1,5},
        {5,1,4,4,4,0,6,12,6,7,4,7,2,4,4,4,1,5},
        {5,2,3,3,3,1,6,6,6,0,4,4,7,4,4,4,1,5},
        {5,5,5,5,5,1,3,4,3,2,4,3,4,0,3,3,2,5},
        {5,5,5,5,5,1,4,7,4,4,7,4,4,1,5,5,5,5},
        {5,5,5,5,5,1,4,3,3,4,4,7,4,1,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,0,3,3,2,5,5,5,5},
        {5,5,5,5,5,2,3,0,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,1,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,2,3,3,2,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 16 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,0,3,3,3,3,0,5,5},
        {5,5,5,5,5,5,0,3,3,3,1,4,4,4,4,1,5,5},
        {5,0,3,3,3,3,1,4,4,4,2,4,7,4,4,1,5,5},
        {5,1,4,4,4,4,2,4,7,4,10,7,4,4,4,1,5,5},
        {5,1,4,4,7,4,4,3,4,0,4,7,4,4,0,2,5,5},
        {5,2,3,0,7,4,4,7,4,2,3,4,0,3,2,5,5,5},
        {5,5,5,1,4,4,4,0,0,4,7,7,1,5,5,5,5,5},
        {5,5,5,1,3,3,7,2,2,4,4,4,1,5,5,5,5,5},
        {5,5,5,1,6,6,6,7,4,7,4,4,2,0,5,5,5,5},
        {5,5,5,1,6,12,6,4,0,4,4,4,4,1,5,5,5,5},
        {5,5,5,1,6,6,0,4,2,7,4,7,4,1,5,5,5,5},
        {5,5,5,1,6,6,2,3,4,4,0,3,3,2,5,5,5,5},
        {5,5,5,1,6,6,6,6,6,0,2,5,5,5,5,5,5,5},
        {5,5,5,2,3,3,3,3,3,2,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 17 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,3,3,0,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,10,3,4,1,3,3,0,5,5,5,5,5,5},
        {5,5,0,3,2,7,4,7,2,4,4,1,3,3,3,0,5,5},
        {5,5,1,4,4,4,7,4,4,4,4,1,6,6,6,1,5,5},
        {5,5,1,4,0,4,4,4,0,3,4,1,6,6,6,1,5,5},
        {5,5,1,4,2,7,4,0,2,4,4,1,4,4,4,1,5,5},
        {5,5,1,4,4,4,7,1,4,4,4,1,4,4,4,1,5,5},
        {5,5,2,3,0,4,4,1,4,0,4,2,3,4,3,1,5,5},
        {5,5,5,5,1,4,4,1,0,2,4,4,4,4,4,1,5,5},
        {5,5,5,5,1,3,3,2,1,4,4,4,4,4,4,1,5,5},
        {5,5,5,5,1,4,4,4,1,4,4,3,0,4,4,1,5,5},
        {5,5,5,5,1,4,7,3,2,3,4,4,1,3,3,2,5,5},
        {5,5,5,5,1,4,4,4,4,4,4,4,1,5,5,5,5,5},
        {5,5,5,5,2,0,4,4,0,4,4,0,2,5,5,5,5,5},
        {5,5,5,5,5,2,3,3,2,3,3,2,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 18 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,0,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,1,4,4,2,0,5,5,5,5,5,5},
        {5,5,0,3,3,3,0,1,4,7,4,1,5,5,5,5,5,5},
        {5,5,1,4,4,4,2,2,4,4,4,1,5,5,5,5,5,5},
        {5,5,1,4,4,4,4,7,4,3,3,1,5,5,5,5,5,5},
        {5,5,2,0,4,7,3,0,6,6,4,2,3,3,0,5,5,5},
        {5,5,5,1,4,4,4,2,6,6,6,4,4,4,1,5,5,5},
        {5,5,5,1,4,3,4,7,4,6,6,0,3,4,1,5,5,5},
        {5,5,5,1,4,4,4,3,0,4,0,2,6,6,1,5,5,5},
        {5,5,5,1,4,3,4,4,2,4,1,6,4,4,1,5,5,5},
        {5,5,5,1,4,4,3,7,4,4,2,6,4,4,1,5,5,5},
        {5,5,5,1,4,4,7,4,4,7,4,3,4,3,1,5,5,5},
        {5,5,5,1,4,3,4,3,0,4,4,4,4,4,1,5,5,5},
        {5,5,5,1,4,4,7,4,2,3,4,0,8,4,1,5,5,5},
        {5,5,5,1,4,7,7,4,4,4,4,1,4,4,1,5,5,5},
        {5,5,0,2,4,0,4,4,0,4,4,1,3,3,2,5,5,5},
        {5,5,1,4,4,2,3,3,2,7,0,2,5,5,5,5,5,5},
        {5,5,1,4,4,4,4,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,2,3,3,3,3,3,3,3,2,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 19 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,0,3,0,3,3,0,5,5,5,0,3,3,3,0,5,5,5},
        {5,1,4,1,4,4,2,3,3,3,2,4,4,4,1,5,5,5},
        {5,1,4,1,4,4,4,4,4,4,4,7,7,4,1,3,0,5},
        {5,1,4,2,4,7,0,3,3,7,7,4,4,4,1,4,1,5},
        {5,1,4,7,4,4,1,4,4,4,4,3,3,0,2,4,1,5},
        {5,1,4,4,7,4,2,0,4,7,4,4,4,2,4,4,1,5},
        {5,1,4,4,4,0,4,7,7,4,7,4,4,4,7,8,1,5},
        {5,1,4,7,4,1,4,3,4,0,4,0,0,4,4,0,2,5},
        {5,1,3,3,4,1,4,4,4,1,4,1,2,4,4,1,5,5},
        {5,1,4,4,4,2,3,4,3,2,4,1,4,4,4,1,5,5},
        {5,1,4,7,7,4,4,4,4,4,4,1,4,0,3,2,5,5},
        {5,1,0,4,4,3,3,3,3,3,3,2,4,1,5,5,5,5},
        {5,1,2,4,4,4,4,4,4,4,4,4,4,1,5,5,5,5},
        {5,1,4,4,4,3,2,3,3,3,3,3,3,2,5,5,5,5},
        {5,1,6,6,6,6,1,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,6,6,1,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,3,6,1,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,6,6,1,5,5,5,5,5,5,5,5,5,5,5},
        {5,2,3,3,3,3,2,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 20 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,3,3,3,3,3,3,3,3,3,0,5,5},
        {5,5,5,5,1,4,4,4,4,4,4,4,4,4,4,1,5,5},
        {5,5,5,5,1,4,3,3,0,3,3,3,3,0,4,1,5,5},
        {5,0,3,3,2,4,7,4,1,4,4,4,4,1,4,1,5,5},
        {5,1,4,4,4,4,4,4,2,4,7,7,4,1,4,2,0,5},
        {5,1,4,4,7,7,4,4,4,0,4,4,4,1,4,4,1,5},
        {5,1,4,4,0,4,4,4,4,1,4,4,4,1,3,4,1,5},
        {5,1,4,4,1,3,4,3,3,2,3,7,0,1,4,4,1,5},
        {5,1,4,7,2,4,4,4,4,4,4,4,2,2,4,4,1,5},
        {5,1,4,7,4,7,4,7,4,0,4,4,4,7,4,4,1,5},
        {5,2,0,4,4,4,7,0,3,2,4,4,3,0,7,4,1,5},
        {5,5,2,0,4,7,4,1,4,4,4,4,4,1,4,4,1,5},
        {5,5,5,1,4,4,4,1,4,4,4,4,4,1,4,4,1,5},
        {5,5,0,2,3,3,3,2,3,4,3,3,3,2,3,0,2,5},
        {5,5,1,6,12,4,7,4,7,4,7,4,7,4,11,1,5,5},
        {5,5,1,6,4,4,4,4,4,4,4,4,4,4,4,1,5,5},
        {5,5,1,6,6,3,6,3,6,3,6,3,6,0,3,2,5,5},
        {5,5,1,6,6,6,6,6,6,6,6,6,6,1,5,5,5,5},
        {5,5,2,3,3,3,3,3,3,3,3,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 21 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,0,0,3,3,0,5,5},
        {5,5,5,0,3,3,3,1,4,4,4,2,2,4,4,1,5,5},
        {5,5,5,1,4,4,4,1,4,4,7,4,4,4,4,1,5,5},
        {5,5,5,1,4,3,4,2,3,3,7,3,0,4,4,1,5,5},
        {5,5,5,1,4,4,4,4,4,4,7,11,1,4,4,1,5,5},
        {5,5,0,2,3,4,0,4,0,0,4,0,1,4,4,1,5,5},
        {5,0,2,4,4,4,2,7,2,2,7,2,2,4,4,1,5,5},
        {5,1,4,7,3,3,4,7,4,4,4,4,4,4,4,1,5,5},
        {5,1,4,4,4,4,4,7,4,7,4,4,3,0,3,2,5,5},
        {5,1,4,4,0,3,4,4,7,4,7,4,4,1,5,5,5,5},
        {5,2,0,3,2,6,6,7,4,4,7,4,4,1,5,5,5,5},
        {5,5,1,6,6,6,6,3,0,3,3,3,3,2,5,5,5,5},
        {5,5,1,6,6,4,6,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,1,6,6,6,6,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,2,3,3,3,3,3,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 22 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,0,3,0,3,3,3,3,3,3,3,3,0,3,3,3,0,5},
        {5,1,4,2,4,4,4,4,4,4,4,4,2,4,4,4,1,5},
        {5,1,4,4,7,7,4,3,3,0,3,4,7,4,4,4,1,5},
        {5,1,4,0,4,4,7,4,4,2,4,7,4,7,4,4,1,5},
        {5,1,4,1,4,4,4,7,4,4,4,4,7,4,7,4,1,5},
        {5,1,4,1,4,4,7,4,4,4,4,0,4,4,3,0,2,5},
        {5,1,4,1,4,0,0,3,7,3,3,1,4,7,4,1,5,5},
        {5,1,4,1,4,1,1,6,6,4,6,1,4,4,4,1,5,5},
        {5,1,4,2,7,2,1,6,6,6,6,1,3,4,3,1,5,5},
        {5,1,4,4,4,4,2,6,6,6,6,1,4,7,4,1,5,5},
        {5,1,3,7,7,7,7,6,6,6,6,1,8,4,4,1,5,5},
        {5,1,4,4,4,4,0,4,6,6,6,1,3,3,7,2,0,5},
        {5,1,4,0,4,4,1,6,6,6,6,1,4,4,4,4,1,5},
        {5,1,4,1,7,4,1,6,6,6,6,1,7,7,4,4,1,5},
        {5,1,4,1,4,7,2,3,6,3,3,1,4,4,3,0,2,5},
        {5,1,4,1,4,4,4,4,7,4,4,2,4,7,4,1,5,5},
        {5,1,4,2,4,4,7,4,4,4,7,4,4,4,4,1,5,5},
        {5,1,4,4,4,0,3,3,3,3,3,0,4,4,4,1,5,5},
        {5,2,3,3,3,2,5,5,5,5,5,2,3,3,3,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 23 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,0,3,3,3,3,3,3,3,3,3,0,5,5,5,5},
        {5,5,0,2,6,6,6,6,6,6,6,6,6,1,5,5,5,5},
        {5,5,1,6,6,6,6,6,6,6,4,6,6,1,5,5,5,5},
        {5,5,1,4,4,4,4,4,8,4,4,4,4,1,5,5,5,5},
        {5,5,2,0,3,3,3,3,3,4,3,3,3,2,3,0,5,5},
        {5,5,5,1,4,4,4,4,4,4,4,4,4,4,4,1,5,5},
        {5,5,5,1,4,7,4,7,4,7,4,7,4,7,4,1,5,5},
        {5,5,0,2,3,3,3,3,3,3,4,3,3,3,3,1,5,5},
        {5,5,1,4,4,4,7,4,7,4,4,7,4,7,4,1,5,5},
        {5,5,1,4,4,4,7,4,4,4,4,4,4,4,4,1,5,5},
        {5,5,2,0,3,3,3,4,3,3,3,3,3,3,0,2,5,5},
        {5,5,5,1,4,4,7,4,7,4,7,4,4,4,1,5,5,5},
        {5,5,5,1,4,4,4,4,4,7,4,4,4,4,1,5,5,5},
        {5,5,5,1,4,7,4,7,4,4,4,7,4,0,2,5,5,5},
        {5,5,0,2,3,3,3,3,3,4,3,0,3,2,5,5,5,5},
        {5,5,1,4,4,7,4,4,4,4,4,1,5,5,5,5,5,5},
        {5,5,1,4,4,4,4,4,4,4,4,1,5,5,5,5,5,5},
        {5,5,1,4,4,4,0,3,3,3,3,2,5,5,5,5,5,5},
        {5,5,2,3,3,3,2,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 24 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,0,3,0,3,3,0,5},
        {5,0,3,3,3,3,0,1,4,4,4,2,4,1,6,6,1,5},
        {5,1,4,4,4,4,2,2,7,4,4,4,4,1,6,6,1,5},
        {5,1,8,4,4,7,4,4,4,7,4,0,4,1,6,6,1,5},
        {5,1,0,3,7,4,4,4,3,3,4,1,4,1,6,6,1,5},
        {5,1,2,4,4,4,4,7,7,4,4,1,4,1,6,6,1,5},
        {5,1,4,4,4,3,4,4,0,4,4,2,4,1,6,6,1,5},
        {5,1,4,7,7,4,4,3,1,3,3,4,7,1,6,6,1,5},
        {5,1,3,4,3,4,4,4,2,4,4,4,4,1,6,6,1,5},
        {5,1,4,4,7,7,0,4,4,0,4,4,4,1,6,6,1,5},
        {5,1,4,4,7,4,2,3,4,2,4,3,7,2,6,6,1,5},
        {5,1,3,4,7,4,4,4,7,4,0,4,4,7,7,4,1,5},
        {5,1,4,4,4,7,3,4,4,4,2,4,4,4,7,4,1,5},
        {5,1,4,4,4,4,4,0,0,0,4,7,4,3,6,6,1,5},
        {5,2,3,0,3,7,4,1,1,1,4,4,4,4,3,0,2,5},
        {5,5,5,1,4,4,3,2,2,2,3,3,4,4,4,1,5,5},
        {5,5,5,1,4,4,4,4,4,4,4,4,7,4,4,1,5,5},
        {5,5,5,1,4,4,0,3,3,3,0,4,4,0,3,2,5,5},
        {5,5,5,2,3,3,2,5,5,5,2,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 25 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,0,3,3,3,3,3,3,3,0,3,3,0,3,3,3,0,5},
        {5,1,4,4,4,4,4,4,4,2,4,4,2,4,4,4,1,5},
        {5,1,4,0,3,3,0,4,4,7,7,4,7,4,4,4,1,5},
        {5,1,4,1,4,4,1,4,7,4,4,4,3,3,3,0,2,5},
        {5,1,4,1,4,4,1,4,4,3,3,0,4,4,4,1,5,5},
        {5,1,4,1,4,4,2,4,3,4,4,2,4,3,4,1,5,5},
        {5,1,4,1,0,4,4,4,7,7,4,7,4,4,4,1,5,5},
        {5,1,4,2,2,7,3,3,7,4,4,0,4,0,6,1,5,5},
        {5,1,4,7,4,4,7,4,7,4,4,1,6,1,6,1,5,5},
        {5,2,3,0,0,4,7,4,0,4,4,1,6,1,3,1,5,5},
        {5,5,5,1,2,4,7,4,2,0,0,1,6,1,6,1,5,5},
        {5,5,5,1,4,4,7,4,4,1,1,1,6,2,6,1,5,5},
        {5,5,5,1,4,4,7,3,4,1,1,2,6,4,6,1,5,5},
        {5,5,5,1,4,3,4,7,4,1,1,4,6,6,6,1,5,5},
        {5,0,3,2,4,4,4,3,4,1,1,4,6,6,6,1,5,5},
        {5,1,4,4,4,4,4,7,4,2,2,0,6,6,6,1,5,5},
        {5,1,4,7,0,4,4,0,4,4,11,1,3,3,3,2,5,5},
        {5,1,4,4,1,3,3,1,4,4,4,1,5,5,5,5,5,5},
        {5,2,3,3,2,5,5,2,3,3,3,2,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 26 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,3,0,5,5,5,5,5},
        {5,5,5,5,5,0,3,2,4,4,4,4,2,3,0,5,5,5},
        {5,5,5,5,5,1,4,7,4,4,7,4,4,4,1,5,5,5},
        {5,5,5,5,5,1,4,4,4,7,4,7,4,4,1,5,5,5},
        {5,5,5,5,5,1,3,4,3,3,3,3,3,3,1,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,7,4,4,4,1,5,5,5},
        {5,5,5,0,3,2,4,4,7,4,7,4,4,4,1,5,5,5},
        {5,5,5,1,4,4,7,4,0,3,4,3,3,0,2,5,5,5},
        {5,5,5,1,4,4,7,4,1,6,6,6,6,1,5,5,5,5},
        {5,5,5,1,4,0,4,4,1,6,6,6,6,1,5,5,5,5},
        {5,5,5,1,4,2,3,7,1,6,6,6,6,1,5,5,5,5},
        {5,5,5,1,4,7,4,4,1,4,4,4,0,2,5,5,5,5},
        {5,5,5,1,4,7,4,7,1,6,4,4,1,5,5,5,5,5},
        {5,5,5,2,0,8,4,4,1,3,3,3,2,5,5,5,5,5},
        {5,5,5,5,2,0,4,0,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,2,3,2,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 27 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,0,3,3,0,5,5,5,5,5},
        {5,5,5,0,3,3,3,0,0,1,6,6,2,3,0,5,5,5},
        {5,5,5,1,4,4,4,2,2,1,6,6,6,6,1,5,5,5},
        {5,5,5,1,7,7,4,4,4,1,6,6,6,6,1,5,5,5},
        {5,5,5,1,4,4,0,4,4,1,6,6,6,6,1,5,5,5},
        {5,5,5,1,4,7,2,4,4,1,6,6,6,4,1,5,5,5},
        {5,5,5,1,4,7,4,7,4,1,6,6,6,4,1,5,5,5},
        {5,5,0,2,4,4,0,4,4,1,3,3,4,4,1,5,5,5},
        {5,5,1,4,7,4,1,4,3,2,4,4,4,3,1,5,5,5},
        {5,5,1,4,0,4,2,4,7,4,4,4,7,4,1,5,5,5},
        {5,5,1,8,2,4,4,4,0,7,3,7,0,4,1,5,5,5},
        {5,5,1,4,7,4,3,3,2,4,4,4,2,4,1,5,5,5},
        {5,5,2,0,4,7,4,4,7,4,4,4,4,4,1,5,5,5},
        {5,5,5,2,0,4,4,7,4,7,3,3,3,3,1,5,5,5},
        {5,5,5,5,1,4,0,4,0,4,4,4,4,4,1,5,5,5},
        {5,5,5,5,1,7,2,4,2,7,3,4,3,4,1,5,5,5},
        {5,5,5,5,1,4,7,4,4,4,4,4,7,4,1,5,5,5},
        {5,5,5,5,1,4,4,4,0,4,4,4,4,0,2,5,5,5},
        {5,5,5,5,2,3,3,3,2,3,3,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 28 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,0,3,3,0,3,3,0,5,5,5,5,5},
        {5,5,5,5,5,5,1,10,4,2,4,4,1,5,5,5,5,5},
        {5,5,5,5,5,5,1,4,7,4,4,4,1,5,5,5,5,5},
        {5,5,5,5,5,0,2,3,4,3,0,4,1,5,5,5,5,5},
        {5,5,0,3,3,2,4,7,4,4,1,4,2,0,5,5,5,5},
        {5,5,1,4,4,4,4,4,4,4,1,4,4,2,0,5,5,5},
        {5,5,1,4,7,4,7,0,3,3,1,4,7,4,1,5,5,5},
        {5,5,1,4,7,7,4,2,4,4,1,4,4,7,1,5,5,5},
        {5,5,1,7,4,4,7,4,4,4,2,7,4,4,1,5,5,5},
        {5,0,2,4,4,7,7,0,4,4,4,7,7,4,2,0,5,5},
        {5,1,4,7,7,4,4,1,4,4,0,4,4,7,4,1,5,5},
        {5,1,4,4,4,4,4,1,3,3,1,4,7,4,4,1,5,5},
        {5,1,4,4,3,7,0,2,6,6,2,0,4,4,4,1,5,5},
        {5,2,3,0,4,6,2,6,6,6,6,2,0,0,3,2,5,5},
        {5,5,5,1,4,6,6,6,6,6,6,6,2,1,5,5,5,5},
        {5,5,5,1,6,6,6,6,4,4,4,6,6,1,5,5,5,5},
        {5,5,5,2,3,3,3,3,3,3,3,3,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 29 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,0,3,3,3,0,3,3,3,0,0,3,3,0,5,5,5},
        {5,5,1,4,4,4,2,4,4,4,2,2,4,4,1,5,5,5},
        {5,5,1,4,4,7,4,4,4,4,4,4,7,4,1,5,5,5},
        {5,5,1,3,7,0,0,0,0,3,3,3,4,4,1,5,5,5},
        {5,5,1,4,4,1,2,2,1,4,4,4,4,0,2,5,5,5},
        {5,5,1,4,4,1,4,4,2,4,4,3,0,2,5,5,5,5},
        {5,5,1,4,4,1,12,6,4,4,4,4,1,5,5,5,5,5},
        {5,5,1,3,7,1,6,6,0,4,7,4,1,5,5,5,5,5},
        {5,5,1,4,4,1,12,12,1,4,3,4,1,5,5,5,5,5},
        {5,5,1,4,4,1,6,6,1,4,7,4,1,5,5,5,5,5},
        {5,5,1,4,7,1,6,6,1,7,3,4,1,5,5,5,5,5},
        {5,5,1,3,4,1,12,6,1,4,10,4,1,5,5,5,5,5},
        {5,5,1,4,4,2,6,6,1,3,4,4,1,5,5,5,5,5},
        {5,5,1,4,4,4,12,6,1,4,4,0,2,5,5,5,5,5},
        {5,5,1,4,4,0,4,4,1,4,3,1,5,5,5,5,5,5},
        {5,5,1,3,7,2,3,3,2,4,4,1,5,5,5,5,5,5},
        {5,5,1,4,4,7,4,4,4,7,4,1,5,5,5,5,5,5},
        {5,5,1,4,4,4,0,3,0,4,4,1,5,5,5,5,5,5},
        {5,5,2,3,3,3,2,5,2,3,3,2,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 30 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,0,3,3,3,0,5,0,3,3,3,0,5,5,5,5},
        {5,5,5,1,4,4,4,2,3,2,4,4,4,1,5,5,5,5},
        {5,5,5,1,4,7,4,4,4,4,7,7,4,1,5,5,5,5},
        {5,5,5,1,0,4,0,3,3,0,4,4,4,1,5,5,5,5},
        {5,5,0,2,2,4,1,4,4,1,4,0,0,2,5,5,5,5},
        {5,5,1,4,4,4,2,4,4,2,8,2,1,5,5,5,5,5},
        {5,5,1,4,7,7,4,4,4,4,7,4,1,5,5,5,5,5},
        {5,5,1,4,4,4,0,4,0,4,7,4,1,3,3,0,5,5},
        {5,5,2,0,3,3,2,4,1,4,4,4,2,4,4,1,5,5},
        {5,5,5,1,4,4,4,7,2,3,3,3,4,4,4,1,5,5},
        {5,5,5,1,4,4,7,4,4,4,4,4,7,4,4,1,5,5},
        {5,5,5,1,0,4,4,4,0,0,0,0,0,4,3,1,5,5},
        {5,5,5,1,2,3,3,3,1,2,2,2,2,4,4,1,5,5},
        {5,5,0,2,6,6,6,6,1,4,7,4,4,7,4,1,5,5},
        {5,5,1,6,6,6,6,6,1,4,7,7,3,4,4,1,5,5},
        {5,5,1,6,6,7,6,6,2,4,7,4,4,7,4,1,5,5},
        {5,5,1,6,6,6,6,6,7,4,4,4,0,4,4,1,5,5},
        {5,5,2,0,4,4,0,3,3,3,3,3,2,3,3,2,5,5},
        {5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 31 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,0,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,2,4,4,4,2,3,3,0,5,5,5},
        {5,5,5,5,5,1,4,4,7,7,4,4,7,4,2,3,0,5},
        {5,0,3,3,3,1,4,4,4,4,3,4,4,4,4,4,1,5},
        {5,1,6,6,6,2,3,0,7,4,4,7,4,7,4,4,1,5},
        {5,1,6,6,6,6,6,1,4,4,4,0,7,3,0,0,2,5},
        {5,1,6,6,6,6,6,2,3,4,3,2,4,4,2,1,5,5},
        {5,2,3,0,6,6,6,4,7,7,4,4,4,7,4,1,5,5},
        {5,5,5,2,0,6,6,4,3,4,3,3,3,8,4,1,5,5},
        {5,5,5,5,1,6,4,0,4,4,4,7,4,7,3,1,5,5},
        {5,5,5,5,1,6,4,1,4,7,4,4,7,4,4,1,5,5},
        {5,5,5,5,2,0,4,2,3,0,4,7,4,4,4,1,5,5},
        {5,5,5,5,5,1,4,7,4,2,7,4,7,4,4,1,5,5},
        {5,5,5,5,5,1,4,4,4,4,7,4,3,0,3,2,5,5},
        {5,5,5,5,5,2,3,3,3,0,7,4,4,1,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,1,4,4,4,1,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,1,4,4,0,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,2,3,3,2,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 32 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,0,3,0,0,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,3,1,10,2,1,5,5,5,5},
        {5,5,5,5,5,1,6,6,6,6,1,7,4,2,0,5,5,5},
        {5,5,5,5,5,1,6,6,6,6,2,4,7,4,1,5,5,5},
        {5,5,5,5,5,1,6,6,6,6,4,7,4,4,1,5,5,5},
        {5,5,5,5,5,1,4,6,6,6,0,4,4,4,1,5,5,5},
        {5,0,3,3,3,2,3,4,3,3,2,3,0,4,2,0,5,5},
        {5,1,4,7,4,7,4,4,4,7,4,4,2,4,4,1,5,5},
        {5,1,4,4,4,4,7,7,4,4,4,7,4,7,4,1,5,5},
        {5,2,3,0,4,7,4,7,4,7,4,4,0,3,3,2,5,5},
        {5,5,5,2,0,4,4,4,7,4,7,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,4,0,3,3,3,3,2,5,5,5,5,5},
        {5,5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 33 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,0,3,0,3,3,3,3,3,3,0,5,5,5,5,5},
        {5,5,0,2,6,1,4,4,4,4,4,4,1,3,3,0,5,5},
        {5,0,2,6,6,1,4,7,4,4,7,4,1,4,4,1,5,5},
        {5,1,6,6,6,2,4,3,3,4,7,4,2,4,4,1,5,5},
        {5,1,6,6,6,6,6,4,4,3,7,7,4,4,4,1,5,5},
        {5,1,0,6,6,6,6,7,4,4,4,4,0,7,4,1,5,5},
        {5,1,2,3,3,4,3,3,3,3,3,3,2,4,4,1,5,5},
        {5,1,4,4,4,7,4,4,4,4,4,4,4,4,0,1,5,5},
        {5,1,4,4,7,4,0,4,4,7,0,4,7,4,2,1,5,5},
        {5,1,4,7,3,3,1,4,7,4,1,4,7,7,4,1,5,5},
        {5,1,4,4,4,11,1,4,4,0,1,4,4,4,4,1,5,5},
        {5,2,3,3,3,3,2,3,3,2,2,3,3,3,3,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 34 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,0,3,3,0,5,5,5,5,5},
        {5,5,5,0,3,3,3,3,3,2,4,4,2,3,3,0,5,5},
        {5,5,5,1,4,4,4,4,7,4,4,6,6,6,6,1,5,5},
        {5,0,3,2,4,4,4,3,4,0,4,6,6,3,6,1,5,5},
        {5,1,4,7,7,4,0,4,4,1,4,6,6,6,6,1,5,5},
        {5,1,4,4,4,4,1,4,7,2,4,6,6,3,6,1,5,5},
        {5,2,0,7,3,0,2,7,4,4,3,3,3,4,4,1,5,5},
        {5,5,1,4,4,2,4,4,7,4,7,4,4,4,4,1,5,5},
        {5,5,1,4,4,4,4,7,4,7,4,4,3,7,4,1,5,5},
        {5,5,1,4,7,0,0,4,7,4,0,3,4,4,0,2,5,5},
        {5,5,2,0,4,2,2,0,3,4,2,4,8,0,2,5,5,5},
        {5,5,5,1,4,4,4,2,4,4,7,4,0,2,5,5,5,5},
        {5,5,5,2,3,0,4,4,4,4,4,0,2,5,5,5,5,5},
        {5,5,5,5,5,2,3,3,3,3,3,2,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 35 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,0,3,3,3,3,3,0,5,5,0,3,3,3,0,5},
        {5,0,3,2,4,4,4,4,4,1,3,3,2,4,4,4,1,5},
        {5,1,4,4,7,4,3,7,4,1,4,4,4,4,4,4,1,5},
        {5,1,4,0,7,7,4,4,3,2,4,7,0,4,4,4,1,5},
        {5,1,4,2,4,4,7,4,4,4,7,4,2,3,7,3,1,5},
        {5,1,4,4,4,0,4,7,3,3,4,7,4,4,7,4,1,5},
        {5,1,0,0,4,2,7,4,7,4,7,4,0,0,3,4,1,5},
        {5,1,1,1,4,4,4,4,4,4,0,4,1,1,4,4,1,5},
        {5,1,2,2,4,0,4,3,4,0,2,4,2,2,4,4,1,5},
        {5,1,4,4,7,2,4,4,4,1,4,4,4,4,4,3,1,5},
        {5,1,4,7,7,4,4,0,0,1,4,4,4,4,8,4,1,5},
        {5,1,4,4,4,3,3,2,2,2,3,3,3,4,4,0,2,5},
        {5,1,4,4,4,4,4,4,4,4,4,4,4,3,4,1,5,5},
        {5,2,3,3,3,0,3,3,3,3,4,3,4,4,6,2,0,5},
        {5,5,5,5,5,1,4,4,4,4,4,4,6,6,6,6,1,5},
        {5,5,5,5,5,1,4,4,4,0,4,0,6,6,6,6,1,5},
        {5,5,5,5,5,1,4,4,4,2,4,1,6,6,6,6,1,5},
        {5,5,5,5,5,2,3,0,4,4,4,1,6,6,6,6,1,5},
        {5,5,5,5,5,5,5,2,3,3,3,2,3,3,3,3,2,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 36 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,0,3,3,3,0,5,5},
        {5,5,5,5,0,3,3,3,3,0,5,1,4,4,4,1,5,5},
        {5,5,5,5,1,4,4,4,4,2,3,2,4,7,4,1,5,5},
        {5,5,5,5,1,4,7,7,7,7,4,4,4,4,4,1,5,5},
        {5,0,3,3,1,4,7,4,4,0,0,7,7,4,0,1,5,5},
        {5,1,6,6,1,4,4,4,4,1,1,4,4,4,1,1,5,5},
        {5,1,6,6,1,4,7,3,0,1,1,4,7,0,1,1,5,5},
        {5,1,6,6,2,3,4,4,1,1,1,0,4,2,2,1,5,5},
        {5,1,6,6,6,4,3,4,2,2,2,2,4,4,4,1,5,5},
        {5,1,6,6,6,4,4,4,7,4,4,4,4,0,4,1,5,5},
        {5,1,6,6,4,4,4,0,0,8,0,0,4,2,7,1,5,5},
        {5,1,6,6,6,0,4,1,1,1,1,2,4,4,4,1,5,5},
        {5,1,6,6,0,2,7,2,2,2,1,4,7,0,7,2,0,5},
        {5,1,6,6,1,4,7,4,4,4,1,4,4,2,4,4,1,5},
        {5,2,3,3,1,4,4,4,7,4,2,4,4,4,7,4,1,5},
        {5,5,5,5,2,3,3,0,4,4,7,4,7,4,4,4,1,5},
        {5,5,5,5,5,5,5,1,4,4,7,4,4,0,3,3,2,5},
        {5,5,5,5,5,5,5,2,0,4,4,0,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,2,3,3,2,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 37 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,0,3,3,3,3,3,0,5,5},
        {5,5,5,5,5,5,5,5,5,1,6,6,6,6,6,1,5,5},
        {5,5,5,5,5,5,0,3,3,2,6,6,6,6,6,1,5,5},
        {5,5,5,0,3,3,1,4,4,4,6,6,0,6,6,1,5,5},
        {5,5,0,2,4,4,2,4,4,4,3,4,1,6,6,1,5,5},
        {5,5,1,4,4,4,4,7,7,4,7,7,2,6,6,1,5,5},
        {5,5,1,4,4,7,0,4,7,4,0,4,4,6,6,1,5,5},
        {5,5,1,4,4,4,2,4,4,3,1,7,7,4,4,1,5,5},
        {5,0,2,3,7,7,4,4,7,4,1,4,4,4,4,1,5,5},
        {5,1,9,4,4,4,3,3,4,4,1,3,4,4,4,1,5,5},
        {5,2,0,3,4,0,4,7,7,4,2,4,4,3,0,2,5,5},
        {5,5,1,4,7,2,4,3,4,3,4,4,4,4,1,5,5,5},
        {5,5,1,4,4,4,4,7,4,7,4,0,7,4,1,5,5,5},
        {5,5,1,4,4,0,4,4,7,4,4,1,4,0,1,5,5,5},
        {5,5,2,3,3,1,0,0,0,4,4,2,4,2,1,5,5,5},
        {5,5,5,5,5,1,2,2,2,3,3,4,4,4,1,5,5,5},
        {5,5,5,5,5,1,4,7,4,7,4,4,4,4,1,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,4,4,4,4,1,5,5,5},
        {5,5,5,5,5,2,3,3,3,3,3,3,3,3,2,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 38 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,0,3,3,0,5,5,5,5,5},
        {5,5,5,0,3,3,3,3,3,2,4,4,1,5,5,5,5,5},
        {5,5,5,1,4,7,4,4,4,7,4,4,1,5,5,5,5,5},
        {5,5,5,1,4,4,4,3,7,3,4,4,1,5,5,5,5,5},
        {5,5,5,2,0,4,4,6,6,6,7,4,1,5,5,5,5,5},
        {5,5,5,5,1,7,3,4,6,6,0,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,4,6,6,6,2,7,2,0,5,5,5,5},
        {5,5,5,5,1,4,3,3,4,3,4,4,4,1,5,5,5,5},
        {5,5,5,5,1,4,7,4,4,4,7,4,8,1,5,5,5,5},
        {5,5,5,5,1,4,4,0,3,3,3,3,3,2,5,5,5,5},
        {5,5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 39 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,0,3,3,3,3,3,0,0,3,3,3,3,0,5,5,5},
        {5,5,1,4,4,4,4,4,2,2,4,4,4,4,2,0,5,5},
        {5,5,1,4,7,4,4,7,4,4,4,4,4,4,4,1,5,5},
        {5,5,1,4,7,7,4,0,4,0,7,7,4,7,4,1,5,5},
        {5,5,1,4,7,4,7,1,4,1,4,4,4,7,4,1,5,5},
        {5,0,2,3,3,3,4,2,7,1,0,0,4,0,0,1,5,5},
        {5,1,4,4,4,7,4,4,4,1,2,2,4,2,2,1,5,5},
        {5,1,4,4,7,4,4,4,4,2,4,4,7,4,4,1,5,5},
        {5,1,4,7,4,7,3,3,7,4,7,7,7,4,4,1,5,5},
        {5,2,0,7,4,4,4,4,4,0,4,7,4,7,4,1,5,5},
        {5,5,1,4,4,7,4,0,0,1,4,4,7,4,4,1,5,5},
        {5,5,2,3,0,0,4,1,2,2,3,3,3,8,4,1,5,5},
        {5,5,5,5,1,1,4,1,4,4,4,4,4,0,0,1,5,5},
        {5,5,5,5,1,2,4,1,4,0,4,3,4,2,2,2,0,5},
        {5,5,5,5,1,4,4,2,4,2,6,4,6,6,6,6,1,5},
        {5,5,5,5,1,4,4,4,6,6,6,6,6,6,6,6,1,5},
        {5,5,5,5,2,3,3,0,4,0,6,6,6,6,6,6,1,5},
        {5,5,5,5,5,5,5,1,4,1,6,6,6,6,6,6,1,5},
        {5,5,5,5,5,5,5,2,3,2,3,3,3,3,3,3,2,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 40 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,0,3,3,3,3,0,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,6,6,1,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,3,6,1,5,5,5,5,5,5,5,5,5,5,5},
        {5,1,6,6,6,6,1,3,3,0,3,3,0,5,5,5,5,5},
        {5,1,6,6,6,6,1,4,4,2,4,4,2,3,3,3,0,5},
        {5,1,4,4,6,3,2,4,4,4,4,4,4,7,4,4,1,5},
        {5,1,4,4,4,4,7,4,3,7,4,4,0,4,4,4,1,5},
        {5,1,4,4,0,4,7,4,4,4,3,7,2,3,3,4,1,5},
        {5,2,3,3,2,0,4,0,4,7,4,4,4,7,4,4,1,5},
        {5,5,5,5,5,1,4,2,0,4,7,3,3,3,3,4,1,5},
        {5,5,5,5,5,1,4,4,2,4,4,7,4,4,7,4,1,5},
        {5,5,5,5,5,1,3,7,4,4,4,4,7,4,7,4,1,5},
        {5,5,5,5,5,1,4,7,4,0,4,4,4,0,4,4,1,5},
        {5,5,5,5,5,1,4,3,7,2,3,3,3,3,7,4,1,5},
        {5,5,5,5,5,1,4,4,4,4,4,4,4,4,4,8,1,5},
        {5,5,5,5,5,2,3,3,3,3,3,3,0,4,4,0,2,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,2,3,3,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 41 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,0,3,3,3,3,3,0,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,6,6,6,4,1,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,3,3,4,4,1,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,4,4,4,0,2,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,0,0,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,1,1,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,1,1,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,1,6,1,1,4,1,3,3,0,5,5,5,5,5,5},
        {5,5,5,1,6,1,1,4,1,4,4,2,0,5,5,5,5,5},
        {5,5,5,1,6,1,1,4,1,4,7,4,2,0,5,5,5,5},
        {5,5,5,1,6,2,2,4,2,4,4,7,4,2,0,5,5,5},
        {5,5,5,1,6,6,4,4,4,7,4,7,4,4,2,0,5,5},
        {5,5,5,1,4,4,0,4,0,7,4,4,7,4,4,1,5,5},
        {5,5,0,2,3,3,2,4,2,4,4,4,7,4,4,1,5,5},
        {5,0,2,4,4,7,4,7,4,0,7,7,4,4,4,1,5,5},
        {5,1,4,4,4,4,4,7,4,1,4,4,4,4,0,2,5,5},
        {5,1,4,7,4,7,4,7,4,1,3,3,3,3,2,5,5,5},
        {5,2,0,4,4,0,0,8,4,1,5,5,5,5,5,5,5,5},
        {5,5,2,3,3,2,2,3,3,2,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 42 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,3,0,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,0,3,2,4,3,3,4,2,3,3,0,5,5,5,5},
        {5,5,5,1,4,4,7,4,4,4,4,4,4,1,5,5,5,5},
        {5,5,5,1,4,4,0,6,6,6,6,0,4,1,5,5,5,5},
        {5,5,5,1,7,4,1,6,6,6,6,2,4,2,0,5,5,5},
        {5,5,5,1,4,7,2,6,6,6,6,4,4,4,1,5,5,5},
        {5,5,0,2,4,4,4,6,6,6,6,0,0,4,1,5,5,5},
        {5,5,1,4,7,7,0,6,6,6,6,2,2,4,1,5,5,5},
        {5,5,1,4,4,4,1,6,6,6,6,7,4,4,1,5,5,5},
        {5,5,1,4,4,4,2,4,3,3,3,3,7,4,1,5,5,5},
        {5,5,2,0,7,7,7,7,7,4,4,7,4,4,1,5,5,5},
        {5,5,5,1,4,4,4,7,4,4,4,4,7,0,2,5,5,5},
        {5,5,5,1,4,4,4,3,4,3,7,7,4,1,5,5,5,5},
        {5,5,5,1,7,7,7,4,7,4,7,4,4,1,5,5,5,5},
        {5,5,5,1,4,4,4,7,4,4,4,7,4,1,5,5,5,5},
        {5,5,5,2,3,3,0,4,4,4,0,0,8,1,5,5,5,5},
        {5,5,5,5,5,5,2,3,3,3,2,2,3,2,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 43 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,3,3,3,3,0,5,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,4,2,0,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,1,6,6,6,0,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,1,3,3,4,1,4,2,3,0,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,2,4,4,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,4,4,3,4,1,5,5,5,5,5},
        {5,5,5,5,2,0,4,4,7,4,7,4,1,5,5,5,5,5},
        {5,5,5,5,5,1,4,3,3,3,7,3,2,0,5,5,5,5},
        {5,5,5,5,0,2,8,4,7,4,4,4,4,1,5,5,5,5},
        {5,5,5,0,2,4,4,0,4,3,0,4,4,1,5,5,5,5},
        {5,5,5,1,4,4,3,2,4,4,2,4,3,1,5,5,5,5},
        {5,5,5,1,4,7,4,4,7,4,4,7,4,1,5,5,5,5},
        {5,5,5,1,4,4,0,4,4,0,0,4,4,1,5,5,5,5},
        {5,5,5,1,3,4,1,3,4,2,2,4,0,2,5,5,5,5},
        {5,5,5,1,4,7,2,4,7,4,4,4,1,5,5,5,5,5},
        {5,5,5,1,4,4,4,4,4,0,4,4,1,5,5,5,5,5},
        {5,5,5,1,4,4,0,4,4,1,3,3,2,5,5,5,5,5},
        {5,5,5,2,3,3,2,3,3,2,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 44 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,0,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,2,3,3,3,3,3,3,0,5,5},
        {5,5,5,5,5,1,4,4,4,4,4,4,4,4,4,1,5,5},
        {5,5,5,5,5,1,4,7,4,0,0,7,4,3,4,1,5,5},
        {5,5,5,5,5,1,4,3,0,1,1,4,4,4,4,1,5,5},
        {5,5,5,5,0,2,4,4,1,1,1,0,4,0,3,2,5,5},
        {5,5,5,5,1,4,4,4,1,1,2,2,4,1,5,5,5,5},
        {5,5,5,5,1,4,4,7,2,2,4,7,4,1,5,5,5,5},
        {5,5,5,5,2,0,4,4,4,4,7,4,7,1,5,5,5,5},
        {5,5,5,5,5,1,4,4,0,3,4,0,8,1,5,5,5,5},
        {5,0,3,3,3,2,3,3,2,4,4,1,0,1,5,5,5,5},
        {5,1,4,4,4,4,4,4,7,4,4,2,1,2,5,5,5,5},
        {5,1,4,0,3,4,3,0,4,3,4,4,1,5,5,5,5,5},
        {5,1,4,1,6,6,6,2,4,7,7,4,1,5,5,5,5,5},
        {5,1,4,2,6,6,6,4,4,4,4,4,1,5,5,5,5,5},
        {5,1,4,4,6,6,6,0,4,0,3,3,2,5,5,5,5,5},
        {5,1,4,3,3,4,3,2,4,1,5,5,5,5,5,5,5,5},
        {5,1,4,4,4,4,4,4,4,1,5,5,5,5,5,5,5,5},
        {5,2,3,3,3,3,3,3,3,2,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 45 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,0,3,3,3,3,3,3,3,0,0,3,3,3,0,5,5},
        {5,5,1,4,4,4,4,4,4,4,1,2,6,6,6,1,5,5},
        {5,5,2,0,4,4,4,7,4,0,2,6,6,6,6,1,5,5},
        {5,5,5,2,0,4,7,4,0,2,6,6,6,6,6,1,5,5},
        {5,5,5,5,1,3,4,3,2,4,6,6,6,0,3,2,5,5},
        {5,5,5,5,1,4,8,4,4,4,6,6,0,1,5,5,5,5},
        {5,5,5,5,1,7,4,3,3,4,4,0,2,2,3,0,5,5},
        {5,5,5,5,1,4,7,7,4,4,0,2,4,4,4,1,5,5},
        {5,5,5,0,2,7,4,4,0,3,2,4,7,4,4,1,5,5},
        {5,5,5,1,4,7,4,4,1,4,4,4,4,7,0,2,5,5},
        {5,5,5,1,4,4,4,7,2,4,7,4,4,4,1,5,5,5},
        {5,5,5,2,0,7,4,4,4,7,4,7,7,4,1,5,5,5},
        {5,5,5,5,1,4,7,4,0,4,7,4,0,3,2,5,5,5},
        {5,5,5,5,2,0,4,4,1,4,4,4,1,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,1,3,3,3,2,5,5,5,5,5},
        {5,5,5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 46 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,0,3,3,3,3,0,5},
        {5,5,5,5,5,5,5,5,5,5,5,1,4,4,4,4,1,5},
        {5,0,3,3,3,0,5,5,5,0,3,2,4,3,0,4,1,5},
        {5,1,6,6,4,2,3,3,3,2,4,7,4,4,1,4,1,5},
        {5,1,6,6,4,4,4,4,4,7,4,4,4,7,1,4,1,5},
        {5,1,6,6,4,4,0,3,4,3,0,4,4,4,1,4,1,5},
        {5,1,6,6,4,0,2,4,7,4,2,7,4,7,1,4,1,5},
        {5,1,6,6,4,1,4,4,4,4,4,7,4,4,2,4,1,5},
        {5,1,6,6,4,1,4,4,7,4,3,3,3,7,4,4,1,5},
        {5,1,6,6,4,1,4,7,4,7,4,4,7,4,3,0,2,5},
        {5,2,3,0,4,2,3,4,0,4,7,4,4,4,4,1,5,5},
        {5,5,5,1,4,4,4,4,1,8,0,0,4,7,4,1,5,5},
        {5,5,5,2,3,3,3,3,2,3,2,1,4,4,0,2,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,2,3,3,2,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 47 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,3,3,0,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,4,4,2,0,5,5,5,5,5},
        {5,5,5,0,3,2,7,4,3,3,4,4,1,5,5,5,5,5},
        {5,5,5,1,4,7,4,7,4,7,4,4,1,5,5,5,5,5},
        {5,5,5,1,4,4,4,3,4,7,0,7,1,5,5,5,5,5},
        {5,5,5,2,0,4,7,4,4,4,2,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,7,0,4,7,4,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,4,1,8,4,0,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,4,2,4,7,2,4,1,5,5,5,5,5},
        {5,5,5,5,1,4,7,7,4,7,4,4,2,0,5,5,5,5},
        {5,5,5,5,1,4,4,7,3,3,4,4,4,1,5,5,5,5},
        {5,5,5,5,2,0,0,4,4,7,4,7,4,1,5,5,5,5},
        {5,5,5,5,5,1,2,4,4,0,0,4,0,2,5,5,5,5},
        {5,5,5,5,5,1,6,4,4,2,2,0,2,5,5,5,5,5},
        {5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5,5,5},
        {5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5,5,5},
        {5,5,5,5,5,1,6,6,6,6,6,1,5,5,5,5,5,5},
        {5,5,5,5,5,2,3,3,3,3,3,2,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 48 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,0,5,5,5,5,5,5,5,5,5},
        {5,0,3,3,3,2,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,1,4,4,7,4,7,4,1,5,0,3,3,3,3,3,0,5},
        {5,1,4,4,4,7,4,4,1,5,1,12,6,12,6,12,1,5},
        {5,2,0,4,7,4,7,4,1,3,2,6,12,6,12,6,1,5},
        {5,5,1,7,4,7,4,4,2,4,4,12,6,12,6,12,1,5},
        {5,5,1,8,7,4,7,4,4,4,4,6,12,6,12,3,1,5},
        {5,5,1,7,4,7,4,4,0,4,4,12,6,12,6,12,1,5},
        {5,0,2,4,7,4,7,4,1,3,0,6,12,6,12,6,1,5},
        {5,1,4,4,4,7,4,4,1,5,1,12,6,12,6,12,1,5},
        {5,1,4,4,7,4,7,4,1,5,2,3,3,3,3,3,2,5},
        {5,2,3,3,3,0,4,4,1,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,2,3,3,2,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 49 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,0,3,3,3,0,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,1,4,4,4,1,5,5,5,5,5,5,5,5},
        {5,5,5,5,0,2,4,3,4,2,0,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,7,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,5,1,4,4,4,4,4,1,5,5,5,5,5,5,5},
        {5,5,5,0,2,0,3,4,3,3,2,0,5,5,5,5,5,5},
        {5,5,5,1,4,1,4,7,4,4,4,1,5,5,5,5,5,5},
        {5,0,3,2,10,1,3,4,3,0,4,2,3,3,3,0,5,5},
        {5,1,4,4,7,2,6,6,6,1,4,7,4,4,4,1,5,5},
        {5,1,4,7,4,4,12,6,6,1,4,4,7,4,4,1,5,5},
        {5,1,0,4,4,0,6,6,6,1,7,4,7,4,0,2,5,5},
        {5,1,2,4,0,1,6,6,6,2,4,7,4,0,2,5,5,5},
        {5,1,4,4,2,2,3,3,7,4,4,4,0,2,5,5,5,5},
        {5,1,4,4,7,4,4,4,4,4,4,0,2,5,5,5,5,5},
        {5,1,4,4,0,3,3,3,3,3,3,2,5,5,5,5,5,5},
        {5,2,3,3,2,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}},
    
    /* 50 */
    {{5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,0,3,3,3,0,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,1,4,4,4,1,5,5,5,5,5,5},
        {5,0,3,3,3,3,3,3,7,8,4,1,5,5,5,5,5,5},
        {5,1,4,4,7,4,4,7,4,7,0,2,3,0,5,5,5,5},
        {5,1,4,4,4,7,4,7,4,4,2,6,6,2,0,5,5,5},
        {5,2,3,0,4,3,4,4,4,7,4,6,6,6,2,0,5,5},
        {5,5,5,1,4,4,7,4,7,4,3,6,12,6,6,2,0,5},
        {5,5,5,2,3,0,4,4,4,0,4,3,6,12,6,6,1,5},
        {5,5,5,5,5,1,4,3,4,1,4,4,3,6,12,6,1,5},
        {5,5,5,5,5,1,4,4,4,2,4,4,4,3,4,4,1,5},
        {5,5,5,5,5,1,3,3,3,4,4,3,3,4,7,4,1,5},
        {5,5,5,0,3,2,4,4,4,4,4,4,4,3,4,4,1,5},
        {5,0,3,2,4,4,3,3,3,3,4,4,3,4,4,4,1,5},
        {5,1,4,4,4,4,4,4,4,4,4,4,4,3,4,3,1,5},
        {5,1,4,4,4,4,0,3,4,3,4,4,7,7,4,4,1,5},
        {5,1,4,4,3,4,1,4,4,4,4,3,4,4,7,4,1,5},
        {5,1,4,4,4,4,1,3,3,0,4,4,4,0,4,4,1,5},
        {5,2,0,4,4,4,1,5,5,2,3,3,3,2,3,3,2,5},
        {5,5,2,3,3,3,2,5,5,5,5,5,5,5,5,5,5,5},
        {5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5}}};

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view, typically from a nib.
    NSString *path = [[NSBundle mainBundle] pathForResource:@"new" ofType:@"wav"];
    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &newId);
    path = [[NSBundle mainBundle] pathForResource:@"push" ofType:@"wav"];
    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &pushId);
    path = [[NSBundle mainBundle] pathForResource:@"illegal" ofType:@"wav"];
    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &illegalId);
    path = [[NSBundle mainBundle] pathForResource:@"undo" ofType:@"wav"];
    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &undoId);
    path = [[NSBundle mainBundle] pathForResource:@"won" ofType:@"wav"];
    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &wonId);
    path = [[NSBundle mainBundle] pathForResource:@"lost" ofType:@"wav"];
    AudioServicesCreateSystemSoundID((__bridge CFURLRef)[NSURL fileURLWithPath:path], &lostId);
    
    // Initialize settings
    MainView *mainView = (MainView *)self.view;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    self.m_sound = [defaults boolForKey:kSoundKey];
    mainView.sLevel = [defaults integerForKey:kLevelKey];
    self.fNextLevel = NO;
    self.sLastDir = -1;
    
    // Initialize variables
    [self initializeGame];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
    
	// Draw the view
	[self.view setNeedsDisplay];
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Flipside View Controller

- (void)flipsideViewControllerDidFinish:(FlipsideViewController *)controller
{
	// Save the settings
    MainView *mainView = (MainView *)self.view;
	NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    self.m_sound = [defaults boolForKey:kSoundKey];
    short sNewLevel = [defaults integerForKey:kNewLevelKey];
    if (mainView.sLevel != sNewLevel) {
        [self newGame:controller];
    }
    
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
        [self dismissViewControllerAnimated:YES completion:nil];
    } else {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
        self.flipsidePopoverController = nil;
    }
}

- (void)popoverControllerDidDismissPopover:(UIPopoverController *)popoverController
{
    self.flipsidePopoverController = nil;
}

- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    if ([[segue identifier] isEqualToString:@"showAlternate"]) {
        [[segue destinationViewController] setDelegate:self];
        
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
            UIPopoverController *popoverController = [(UIStoryboardPopoverSegue *)segue popoverController];
            self.flipsidePopoverController = popoverController;
            popoverController.delegate = self;
        }
    }
}

- (IBAction)togglePopover:(id)sender
{
    if (self.flipsidePopoverController) {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
        self.flipsidePopoverController = nil;
    } else {
        [self performSegueWithIdentifier:@"showAlternate" sender:sender];
    }
}

- (IBAction)newGame:(id)sender
{
    if(!self.fGameOver) {
        UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:@"Do you want to start a new game?" delegate:self cancelButtonTitle:@"No" destructiveButtonTitle:@"Yes" otherButtonTitles:nil];
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone && [sender isKindOfClass:[FlipsideViewController class]]) {
            FlipsideViewController *controller = sender;
            [actionSheet showInView:controller.view];
        } else {
            [actionSheet showInView:self.view];
        }
    } else {
        [self initializeGame];
    }
}

- (void)actionSheet:(UIActionSheet *)actionSheet didDismissWithButtonIndex:(NSInteger)buttonIndex {
    if (buttonIndex != [actionSheet cancelButtonIndex]) {
        [self initializeGame];
    }
    self.fNextLevel = NO;
}

- (void) playSound:(SystemSoundID)soundID
{
	if (self.m_sound) {
		AudioServicesPlaySystemSound(soundID);
	}
}

- (void)initializeGame
{
	// Play the new game sound
	[self playSound:newId];
    
	// Initialize the game
    MainView *mainView = (MainView *)self.view;
    self.fGameOver = NO;
    self.gesture = NO;
    mainView.ulMoves = 0;
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if (self.fNextLevel) {
        mainView.sLevel++;
        [defaults setInteger:mainView.sLevel forKey:kLevelKey];
        self.fNextLevel = NO;
    } else {
        short sNewLevel = [defaults integerForKey:kNewLevelKey];
        mainView.sLevel = sNewLevel;
        [defaults setInteger:mainView.sLevel forKey:kLevelKey];
    }
    [defaults synchronize];
    
    self.ptlWorker = ptlWorkerInitial[mainView.sLevel];
    self.undoButton.hidden = NO;

	// initialize grid structure
    Board boardIni;
	for(short x = 0; x < COLUMNSX; x++)
		for(short y = 0; y < LINESY; y++)
			boardIni.location[x][y] = BoardLevels[mainView.sLevel][x][y];
    mainView.board = boardIni;
    UIInterfaceOrientation orientation = [[UIApplication sharedApplication] statusBarOrientation];
    if (UIInterfaceOrientationIsLandscape(orientation)) {
        switch (mainView.board.location[ptlWorker.x][ptlWorker.y])
        {
            case 9: // Up
                self.sLastDir = 1;
                break;
            case 11: // Down
                self.sLastDir = 3;
                break;
            case 8: // Left
                self.sLastDir = 0;
                break;
            case 10: // Right
                self.sLastDir = 2;
                break;
        }
    } else {
        switch (mainView.board.location[ptlWorker.x][ptlWorker.y])
        {
            case 9: // Up
                self.sLastDir = 1;
                break;
            case 11: // Down
                self.sLastDir = 3;
                break;
            case 8: // Left
                self.sLastDir = 0;
                break;
            case 10: // Right
                self.sLastDir = 2;
                break;
        }
    }
    mainView.text = [[NSString alloc] initWithFormat: @"Swipe to change direction. Tap to move."];
    
	// Draw the view
	[mainView setNeedsDisplay];
}

- (IBAction)undo:(id)sender
{
    if(!self.fGameOver) {
        MainView *mainView = (MainView *)self.view;
        
        // undo the last move
        [self playSound:undoId];
        self.ptlWorker = self.ptlWorkerUndo;
        mainView.board = self.boardUndo;
        [mainView setNeedsDisplay];
    }
    else {
        // Unable to show undo
        [self playSound:illegalId];
    }
}

- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
    if (!self.gesture) {
        self.gesture = YES;
        UITouch *touch = [touches anyObject];
        self.gestureStartPoint = [touch locationInView:self.view];
    }
}

- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event
{
    self.gesture = NO;
}

- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
    if (self.gesture) {
        UITouch *touch = [touches anyObject];
        CGPoint currentPosition = [touch locationInView:self.view];
        CGFloat deltaX = self.gestureStartPoint.x - currentPosition.x;
        CGFloat deltaY = self.gestureStartPoint.y - currentPosition.y;
        CGFloat widthX, heightY;
        CGFloat multiplier;
        
        MainView *mainView = (MainView *)self.view;
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
            multiplier = 2.0;
        } else {
            multiplier = 1.0;
        }
        UIInterfaceOrientation orientation = [[UIApplication sharedApplication] statusBarOrientation];
        if (UIInterfaceOrientationIsLandscape(orientation)) {
            widthX = multiplier * mainView.WIDTHX;
            heightY = multiplier * mainView.HEIGHTY;
        } else {
            widthX = multiplier * mainView.HEIGHTY;
            heightY = multiplier * mainView.WIDTHX;
        }
    
        if (fabsf(deltaX) >= widthX && fabsf(deltaY) <= kMaximumVariance) {
            // Horizontal swipe
            if (deltaX > 0) {
                // Left swipe
                [self swipe:UISwipeGestureRecognizerDirectionLeft :1];
                self.gestureStartPoint = currentPosition;
            } else {
                // Left swipe
                [self swipe:UISwipeGestureRecognizerDirectionRight :1];
                self.gestureStartPoint = currentPosition;
            }
        } else if (fabsf(deltaY) >= heightY && fabsf(deltaX) <= kMaximumVariance) {
            // Vertical swipe
            if (deltaY > 0) {
                // Up swipe
                [self swipe:UISwipeGestureRecognizerDirectionUp :1];
                self.gestureStartPoint = currentPosition;
            } else {
                // Down swipe
                [self swipe:UISwipeGestureRecognizerDirectionDown :1];
                self.gestureStartPoint = currentPosition;
            }
        }
    }
}

- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
    if (self.gesture) {
        UITouch *touch = [touches anyObject];
        CGPoint currentPosition = [touch locationInView:self.view];
        CGFloat deltaX = self.gestureStartPoint.x - currentPosition.x;
        CGFloat deltaY = self.gestureStartPoint.y - currentPosition.y;
        CGFloat widthX, heightY;
        CGFloat multiplier;
        
        MainView *mainView = (MainView *)self.view;
        if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) {
            multiplier = 2.0;
        } else {
            multiplier = 1.0;
        }
        UIInterfaceOrientation orientation = [[UIApplication sharedApplication] statusBarOrientation];
        if (UIInterfaceOrientationIsLandscape(orientation)) {
            widthX = multiplier * mainView.WIDTHX;
            heightY = multiplier * mainView.HEIGHTY;
        } else {
            widthX = multiplier * mainView.HEIGHTY;
            heightY = multiplier * mainView.WIDTHX;
        }
        
        if (fabsf(deltaX) >= widthX && fabsf(deltaY) <= kMaximumVariance) {
            // Horizontal swipe
            if (deltaX > 0) {
                // Left swipe
                [self swipe:UISwipeGestureRecognizerDirectionLeft :1];
                self.gestureStartPoint = currentPosition;
            } else {
                // Left swipe
                [self swipe:UISwipeGestureRecognizerDirectionRight :1];
                self.gestureStartPoint = currentPosition;
            }
        } else if (fabsf(deltaY) >= heightY && fabsf(deltaX) <= kMaximumVariance) {
            // Vertical swipe
            if (deltaY > 0) {
                // Up swipe
                [self swipe:UISwipeGestureRecognizerDirectionUp :1];
                self.gestureStartPoint = currentPosition;
            } else {
                // Down swipe
                [self swipe:UISwipeGestureRecognizerDirectionDown :1];
                self.gestureStartPoint = currentPosition;
            }
        }
        self.gesture = NO;
    }

}

- (void)swipe:(UISwipeGestureRecognizerDirection)direction :(NSUInteger)number
{
    for (int i = 0; i < number; i++) {
        if(!self.fGameOver)
        {
            MainView *mainView = (MainView *)self.view;
            UIInterfaceOrientation orientation = [[UIApplication sharedApplication] statusBarOrientation];
            if (UIInterfaceOrientationIsLandscape(orientation)) {
                switch (direction)
                {
                    case UISwipeGestureRecognizerDirectionUp:
                        self.sLastDir = 1;
                        [self vdMoveWorker:&ptlWorker :1];
                        break;
                    case UISwipeGestureRecognizerDirectionDown:
                        self.sLastDir = 3;
                        [self vdMoveWorker:&ptlWorker :3];
                        break;
                    case UISwipeGestureRecognizerDirectionLeft:
                        self.sLastDir = 0;
                        [self vdMoveWorker:&ptlWorker :0];
                        break;
                    case UISwipeGestureRecognizerDirectionRight:
                        self.sLastDir = 2;
                        [self vdMoveWorker:&ptlWorker :2];
                        break;
                }
            } else {
                switch (direction)
                {
                    case UISwipeGestureRecognizerDirectionUp:
                        self.sLastDir = 0;
                        [self vdMoveWorker:&ptlWorker :0];
                        break;
                    case UISwipeGestureRecognizerDirectionDown:
                        self.sLastDir = 2;
                        [self vdMoveWorker:&ptlWorker :2];
                        break;
                    case UISwipeGestureRecognizerDirectionLeft:
                        self.sLastDir = 3;
                        [self vdMoveWorker:&ptlWorker :3];
                        break;
                    case UISwipeGestureRecognizerDirectionRight:
                        self.sLastDir = 1;
                        [self vdMoveWorker:&ptlWorker :1];
                        break;
                }
            }
            
            // Remove text
            if (mainView.text != nil) {
                mainView.text = nil;
                [mainView invalidateText];
            }
        
            // ist das Spiel verloren
            if(vdLose(mainView.board))
            {
                [self playSound:lostId];
                self.fGameOver = YES;
                self.undoButton.hidden = YES;
            
                // Ask to try again
                UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:@"One box has been moved into a corner, so you can no longer move it to its destination. Do you want to try again?" delegate:self cancelButtonTitle:@"No" destructiveButtonTitle:@"Yes" otherButtonTitles:nil];
                [actionSheet showInView:self.view];
            }
        
            // ist das Spiel gewonnen
            if(!self.fGameOver && vdWin(mainView.board))
            {
                [self playSound:wonId];
                // das Spiel ist gewonnen
                self.fGameOver = YES;
                self.undoButton.hidden = YES;
            
                // Ask to continue to the next level
                if(mainView.sLevel < (NUMBER_OF_LEVELS - 1))
                {
                    self.fNextLevel = YES;
                    UIActionSheet *actionSheet = [[UIActionSheet alloc] initWithTitle:@"Congratulations. Ready to try the next level?" delegate:self cancelButtonTitle:@"No" destructiveButtonTitle:@"Yes" otherButtonTitles:nil];
                    [actionSheet showInView:self.view];
                }
            
            }
        }
    }
}

- (void) vdMoveWorker:(BoardLocation *) ppointlWorker :(short) sDir
{
    BoardLocation ptlIni, ptlNext;
    BOOL fUnder = NO;
    MainView *mainView = (MainView *)self.view;
    PBoard pBoard = [mainView getBoardPointer];
    
    // Save last board for undo
    self.sLastDir = sDir;
    self.boardUndo = mainView.board;
    self.ptlWorkerUndo = self.ptlWorker;
    
    // zuerst einmal den bagger drehen
    ptlIni = *ppointlWorker;
    ptlNext = *ppointlWorker;
    if(mainView.board.location[ppointlWorker->x][ppointlWorker->y] > 11)
        fUnder = YES;
    pBoard->location[ppointlWorker->x][ppointlWorker->y] = sDir + (fUnder ? 13 : 8);
    [mainView invalidateBoard:ptlNext.x :ptlNext.y];
    
    // kann ich den worker in sDir moven
    switch (sDir)
    {
        case 0:
            if(!vdBoardOK(mainView.board, ppointlWorker->x - 1, ppointlWorker->y, ppointlWorker->x - 2, ppointlWorker->y))
            {
                [self playSound:illegalId];
                return;
            }
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = (fUnder ? 6 : 4);
            ppointlWorker->x--;
            ptlNext.x -= 2;
            break;
        case 1:
            if(!vdBoardOK(mainView.board, ppointlWorker->x, ppointlWorker->y + 1, ppointlWorker->x, ppointlWorker->y + 2))
            {
                [self playSound:illegalId];
                return;
            }
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = (fUnder ? 6 : 4);
            ppointlWorker->y++;
            ptlNext.y += 2;
            break;
        case 2:
            if(!vdBoardOK(mainView.board, ppointlWorker->x + 1, ppointlWorker->y, ppointlWorker->x + 2, ppointlWorker->y))
            {
                [self playSound:illegalId];
                return;
            }
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = (fUnder ? 6 : 4);
            ppointlWorker->x++;
            ptlNext.x += 2;
            break;
        case 3:
            if(!vdBoardOK(mainView.board, ppointlWorker->x, ppointlWorker->y - 1, ppointlWorker->x, ppointlWorker->y - 2))
            {
                [self playSound:illegalId];
                return;
            }
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = (fUnder ? 6 : 4);
            ppointlWorker->y--;
            ptlNext.y -= 2;
            break;
    }
    
    switch (mainView.board.location[ppointlWorker->x][ppointlWorker->y])
    {
        case 6:
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = sDir + 13;
            break;
        case 4:
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = sDir + 8;
            break;
        case 7:
            [self playSound:pushId];
            if(mainView.board.location[ptlNext.x][ptlNext.y] == 6)
                pBoard->location[ptlNext.x][ptlNext.y] = 12;
            else
                pBoard->location[ptlNext.x][ptlNext.y] = 7;
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = sDir + 8;
            break;
        case 12:
            [self playSound:pushId];
            if(mainView.board.location[ptlNext.x][ptlNext.y] == 6)
                pBoard->location[ptlNext.x][ptlNext.y] = 12;
            else
                pBoard->location[ptlNext.x][ptlNext.y] = 7;
            pBoard->location[ppointlWorker->x][ppointlWorker->y] = sDir + 13;
            break;
    } 
    
    // Draw the moves and update the moves
    [mainView invalidateBoard:ptlNext.x :ptlNext.y];
    [mainView invalidateBoard:ppointlWorker->x :ppointlWorker->y];
    [mainView invalidateBoard:ptlIni.x :ptlIni.y];
    mainView.ulMoves++;
    [mainView invalidateMoves];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPad) {
        return YES;
    } else {
        return (interfaceOrientation !=	UIInterfaceOrientationPortraitUpsideDown);
    }
}

- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration {
    // Dismiss popover if it is displayed
    if (self.flipsidePopoverController != nil) {
        [self.flipsidePopoverController dismissPopoverAnimated:YES];
        self.flipsidePopoverController = nil;
    }
}

@end
